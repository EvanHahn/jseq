// Generated by CoffeeScript 1.7.1
(function() {
  var ASSERT, BNP, LODASH, QUNITJS, TRM, UNDERSCORE, alert, badge, cjs_deep_eql, custom_jseq, custom_jseq_options, debug, echo, get_errorproof_comparator, help, info, jkroso_equals, jseq, jv_equals, log, othiym23_deepEqual, praise, rpr, should, substack_deep_equal, urge, warn, whisper;

  TRM = require('coffeenode-trm');

  rpr = TRM.rpr.bind(TRM);

  badge = 'jsEq/implementations';

  log = TRM.get_logger('plain', badge);

  info = TRM.get_logger('info', badge);

  whisper = TRM.get_logger('whisper', badge);

  alert = TRM.get_logger('alert', badge);

  debug = TRM.get_logger('debug', badge);

  warn = TRM.get_logger('warn', badge);

  help = TRM.get_logger('help', badge);

  urge = TRM.get_logger('urge', badge);

  praise = TRM.get_logger('praise', badge);

  echo = TRM.echo.bind(TRM);


  /* implementations of deep equality tests: */

  BNP = require('coffeenode-bitsnpieces');

  ASSERT = require('assert');

  LODASH = require('lodash');

  UNDERSCORE = require('underscore');

  jkroso_equals = require('equals');

  QUNITJS = require('qunitjs');

  othiym23_deepEqual = require('deeper');

  should = require('should');

  substack_deep_equal = require('deep-equal');

  jv_equals = require('../3rd-party/JV-jeanvincent.js');

  cjs_deep_eql = require('deep-eql');

  jseq = require('./eq');

  custom_jseq_options = {
    'signed-zeroes': true,
    'functions': false,
    'NaN': false,
    'array-attributes': false
  };

  custom_jseq = jseq["new"](custom_jseq_options);

  get_errorproof_comparator = function(test_method) {
    return function(a, b) {
      var R, error;
      try {
        R = test_method(a, b);
      } catch (_error) {
        error = _error;
        if (error['message'] === 'Maximum call stack size exceeded') {
          error['code'] = 'jsEq';
          throw error;
        }
        return false;
      }
      return R;
    };
  };

  module.exports = {
    "LDS: lodash _.isEqual": {
      eq: function(a, b) {
        return LODASH.isEqual(a, b);
      },
      ne: function(a, b) {
        return !LODASH.isEqual(a, b);
      }
    },
    "EQ: jsEq.eq": {
      eq: function(a, b) {
        return jseq(a, b);
      },
      ne: function(a, b) {
        return !jseq(a, b);
      }
    },
    "CEQ: custom version of jsEq.eq": {
      eq: function(a, b) {
        return custom_jseq(a, b);
      },
      ne: function(a, b) {
        return !custom_jseq(a, b);
      }
    }
  };

}).call(this);
