// Generated by CoffeeScript 1.7.1
(function() {
  var ASSERT, BNP, LODASH, QUNITJS, TRM, UNDERSCORE, alert, badge, debug, echo, help, info, jkroso_equals, jv_equals, log, othiym23_deepEqual, praise, rpr, should, substack_deep_equal, urge, warn, whisper;

  TRM = require('coffeenode-trm');

  rpr = TRM.rpr.bind(TRM);

  badge = 'jsEq/implementations';

  log = TRM.get_logger('plain', badge);

  info = TRM.get_logger('info', badge);

  whisper = TRM.get_logger('whisper', badge);

  alert = TRM.get_logger('alert', badge);

  debug = TRM.get_logger('debug', badge);

  warn = TRM.get_logger('warn', badge);

  help = TRM.get_logger('help', badge);

  urge = TRM.get_logger('urge', badge);

  praise = TRM.get_logger('praise', badge);

  echo = TRM.echo.bind(TRM);


  /* implementations of deep equality tests: */

  BNP = require('coffeenode-bitsnpieces');

  ASSERT = require('assert');

  LODASH = require('lodash');

  UNDERSCORE = require('underscore');

  jkroso_equals = require('equals');

  QUNITJS = require('qunitjs');

  othiym23_deepEqual = require('deeper');

  should = require('should');

  substack_deep_equal = require('deep-equal');

  jv_equals = require('../3rd-party/JV-jeanvincent.js');

  module.exports = {
    "==: native ==": {
      eq: function(a, b) {
        return a == b;
      },
      ne: function(a, b) {
        return a != b;
      }
    },
    "===: native ===": {
      eq: function(a, b) {
        return a === b;
      },
      ne: function(a, b) {
        return a !== b;
      }
    },
    "OIS: native Object.is": {
      eq: function(a, b) {
        return Object.is(a, b);
      },
      ne: function(a, b) {
        return Object.is(a, b);
      }
    },
    "NDE: NodeJS assert.deepEqual": {
      eq: function(a, b) {
        var error;
        try {
          ASSERT.deepEqual(a, b);
        } catch (_error) {
          error = _error;
          return false;
        }
        return true;
      },
      ne: function(a, b) {
        var error;
        try {
          ASSERT.notDeepEqual(a, b);
        } catch (_error) {
          error = _error;
          return false;
        }
        return true;
      }
    },
    "UDS: underscore _.isEqual": {
      eq: function(a, b) {
        return UNDERSCORE.isEqual(a, b);
      },
      ne: function(a, b) {
        return !UNDERSCORE.isEqual(a, b);
      }
    },
    "LDS: lodash _.isEqual": {
      eq: function(a, b) {
        return LODASH.isEqual(a, b);
      },
      ne: function(a, b) {
        return !LODASH.isEqual(a, b);
      }
    },
    "JKR: jkroso equals": {
      eq: function(a, b) {
        return jkroso_equals(a, b);
      },
      ne: function(a, b) {
        return !jkroso_equals(a, b);
      }
    },
    "o23: https://github.com/othiym23/node-deeper": {
      eq: function(a, b) {
        return othiym23_deepEqual(a, b);
      },
      ne: function(a, b) {
        return !othiym23_deepEqual(a, b);
      }
    },
    "*JV: http://stackoverflow.com/a/6713782/256361": {
      eq: function(a, b) {
        var R, error;
        try {
          R = jv_equals(a, b);
        } catch (_error) {
          error = _error;
          whisper(error);
          return false;
        }
        return R;
      },
      ne: function(a, b) {
        var R, error;
        try {
          R = !jv_equals(a, b);
        } catch (_error) {
          error = _error;
          whisper(error);
          return false;
        }
        return R;
      }
    },
    "DEQ: https://github.com/substack/node-deep-equal": {
      eq: function(a, b) {
        var R, error;
        try {
          R = substack_deep_equal(a, b);
        } catch (_error) {
          error = _error;
          whisper(error);
          return false;
        }
        return R;
      },
      ne: function(a, b) {
        var R, error;
        try {
          R = !substack_deep_equal(a, b);
        } catch (_error) {
          error = _error;
          whisper(error);
          return false;
        }
        return R;
      }
    },
    "QUN: ! qunitjs": {
      eq: function(a, b) {
        return false;
      },
      ne: function(a, b) {
        return false;
      }
    },
    "SH1: https://github.com/shouldjs/should.js#equal": {
      eq: function(a, b) {
        var error;
        try {
          (should(a)).equal(b);
        } catch (_error) {
          error = _error;
          return false;
        }
        return true;
      },
      ne: function(a, b) {
        var error;
        try {
          !(should(a)).equal(b);
        } catch (_error) {
          error = _error;
          return false;
        }
        return true;
      }
    },
    "SH2: https://github.com/shouldjs/should.js#eql": {
      eq: function(a, b) {
        var error;
        try {
          (should(a)).eql(b);
        } catch (_error) {
          error = _error;
          return false;
        }
        return true;
      },
      ne: function(a, b) {
        var error;
        try {
          !(should(a)).eql(b);
        } catch (_error) {
          error = _error;
          return false;
        }
        return true;
      }
    },
    "CND: CoffeeNode Bits'N'Pieces": {
      eq: function(a, b) {
        return BNP.equals(a, b);
      },
      ne: function(a, b) {
        return !BNP.equals(a, b);
      }
    }
  };

}).call(this);
